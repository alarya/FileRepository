 //---------------------To upload a file to current path in navigator ---------------------------------//
        [HttpPost]
        public ActionResult UploadFile(String CurrentPath)
        {
            //Pending
            // Check for overwriting condition 

            
            //save file to server directory
            if (Request.Files.Count > 0)
            {
                var file = Request.Files[0];

                if (file != null && file.ContentLength > 0)
                {
                    var fileName = Path.GetFileName(file.FileName);
                    var path = Path.Combine(Server.MapPath("~/App_Data"),CurrentPath, fileName);
                    file.SaveAs(path);

                    //add file to database
                    FileRepository.Models.File newFile = new Models.File();
                    newFile.FileName = fileName;
                    var user = UserManager.FindById(User.Identity.GetUserId());
                    String UserMailId = user.Email;
                    newFile.OwnerName = UserMailId;
                    newFile.Type = "file";
                    newFile.Path = CurrentPath;
                    db.Files.Add(newFile);
                    db.SaveChanges();
                }
            }
            ViewBag.CurrentPath = CurrentPath;
            return View("Index", db.Files.Where(i => i.Path == CurrentPath));
        }

//--------------Download File view-------------------------------------------------------//
        public ActionResult DownloadFile(int? id)
        {
            FileRepository.Models.File file = db.Files.Find(id);

            var dependencyFiles1 = db.Dependencies.Where(i => i.FileId1 == id);
            var dependencyFiles2 = db.Dependencies.Where(i => i.FileId2 == id);

            //Dictionary<int,string> dependentFiles = new Dictionary<int,string>();
            //foreach (var item in dependencyFiles1)
            //{
            //    //if(!dependentFiles.ContainsKey(item.FileName1.FileId))
            //       dependentFiles.Add(item.FileName2.FileId ,item.FileName2.FileName);
            //}
            //foreach (var item in dependencyFiles2)
            //{
            //    //if(!dependentFiles.ContainsKey(item.FileName1.FileId))
            //       dependentFiles.Add(item.FileName1.FileId,item.FileName1.FileName);
            //}

            List<FileRepository.Models.File> dependentfiles = new List<Models.File>();
            foreach(var item in dependencyFiles1)
                dependentfiles.AddRange(db.Files.Where(i => i.FileId == item.FileId2));

            foreach (var item in dependencyFiles2)
                dependentfiles.AddRange(db.Files.Where(i => i.FileId == item.FileId1));

            ViewBag.FileName = file.FileName;
            ViewBag.FileId = file.FileId;
            //ViewBag.FileList = dependentFiles;
            ViewBag.CurrentPath = file.Path + '/';

            return View(dependentfiles);
        }

        //--------This method returns the file to be downloaded with dependencies----------------------------------//
        [HttpPost]
        public FileResult Download(int? id, Dictionary<int,string> files)
        {
            string[] Ids = Request.Form.GetValues("Files");
            List<string> tempId = new List<string>();
            foreach(string Id in Ids)
            {
                if(Id != "false")
                tempId.Add(Id);
            }

            if (tempId.Count == 0)
            {
                string path = db.Files.Find(id).Path;
                string physicalPath = Path.Combine(Server.MapPath("~/App_data"), path, db.Files.Find(id).FileName);

                return File(physicalPath, System.Net.Mime.MediaTypeNames.Application.Octet);
            }
            else
            {
                var outputStream = new MemoryStream();

                using (var zip = new ZipFile())
                {
                    string path = db.Files.Find(id).Path;
                    string physicalPath = Path.Combine(Server.MapPath("~/App_data"), path, db.Files.Find(id).FileName);
                    zip.AddFile(physicalPath,"");
                    foreach(var item in tempId)
                    {
                        path = db.Files.Find(Convert.ToInt32(item)).Path;
                        physicalPath = Path.Combine(Server.MapPath("~/App_data"), path, db.Files.Find(Convert.ToInt32(item)).FileName);
                        zip.AddFile(physicalPath,"DependentFiles");
                    }
                    zip.Save(outputStream);
                }

                outputStream.Position = 0 ;
                return File(outputStream,"application/zip",db.Files.Find(id).FileName + ".zip");
            }
        }



INDEX.CSHTML

<div id="CurrentPath">Current Path: @ViewBag.CurrentPath</div>
    @Html.ActionLink("Go Back", "DirectoryChangeOut", new { path = ViewBag.CurrentPath })
    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.FileName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Type)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.OwnerName)
            </th>
            <th></th>
        </tr>
    @*Display all foders first*@
    @foreach (var item in Model) {
      if(item.Type == "folder")
      { 
        <tr>
            <td>
                <img src="~/Content/folder1.png"/>
                @Html.ActionLink(item.FileName, "DirectoryChangeIn", new {path = ViewBag.CurrentPath + "/" + item.FileName})
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Type)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.OwnerName)
            </td>
            <td>
                @Html.ActionLink("View All Files", "ViewFolder", new { path = ViewBag.CurrentPath + "/" + item.FileName }) |
                @Html.ActionLink("Rename", "RenameFolder", new {id = item.FileId}) 
            </td>
            @*<td>
                @Html.ActionLink("Edit", "Edit", new { id=item.FileId }) |
                @Html.ActionLink("Details", "Details", new { id=item.FileId }) |
                @Html.ActionLink("Delete", "Delete", new { id=item.FileId })
            </td>*@
        </tr>
       }
    }
    @* Then display files *@
    @foreach (var item in Model)
    {
        if (item.Type == "file")
        {
            <tr>
                <td>
                    <img src="~/Content/file1.png" />
                    @Html.ActionLink(item.FileName, "ViewFiles", new { path = ViewBag.CurrentPath + "/" + item.FileName })
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Type)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.OwnerName)
                </td>
                <td>
                    @Html.ActionLink("Download", "DownloadFile", new { id = item.FileId }) |
                    @Html.ActionLink("Delete", "DeleteFile", new { id = item.FileId }, new { onclick = "return confirm('Are you sure you wish to delete this file?');" }) |
                    @Html.ActionLink("Dependencies", "Dependencies", new { id = item.FileId })
                </td>
                @*<td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.FileId }) |
                    @Html.ActionLink("Details", "Details", new { id = item.FileId }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.FileId })
                </td>*@
            </tr>
        }
    }
    </table>

@*<div>
    <label for="fileUpload"></label>
    Select File to Upload: <input id="fileUpload" type="file" />

    <input id="btnUploadFile" type="button" value="Upload File" />
</div>*@

<div class="UploadSection">
    @using (Html.BeginForm("UploadFile", "Developer", new { CurrentPath = ViewBag.CurrentPath }, FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        <input type="file" name="file" style="float:left"/><input type="submit" name="Submit" id="Submit" value="Upload" class="btn btn-default" />        
    }
</div>
<br />
<div class="createFolder">
@using (Html.BeginForm("CreateFolder", "Developer", new { CurrentPath = ViewBag.CurrentPath }, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    <input type="submit" name="Submit" id="Submit" value="Create a new Folder" style="float:left" class=" btn btn-default" />
    <input type="text" name="folder">
}
</div>